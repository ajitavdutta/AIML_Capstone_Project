"""
Django settings for backend_app project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from tensorflow_addons.metrics import F1Score
from tensorflow import keras
from pathlib import Path
from . import modelUtils
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-inu!@i$wo5q*1p)^%m%k!4fr8d1awh%tp16p^^a%%2di!+@v3g'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'fileUpload',
    'fileUpload_rest',
    'prediction_rest',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend_app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ORIGIN_ALLOW_ALL =  True

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

CLASSIFICATION_MODEL_NAME = 'Classification.h5'
CLASSIFICATION_IMG_SIZE = 224
CLASSIFICATION_MODEL = keras.models.load_model(os.path.join(BASE_DIR, 'library', 'model', CLASSIFICATION_MODEL_NAME))

PREDICTION_PATH = os.path.join(MEDIA_ROOT, "prediction")

DETECTION_MODEL_NAME = 'DetectionModel.h5'
DETECTION_IMG_SIZE = 256
DETECTION_MODEL = modelUtils.__load_model(os.path.join(BASE_DIR, 'library', 'model', DETECTION_MODEL_NAME))


SEGMENTATION_IMG_SIZE = 640
SEGMENT_RUN_PATH = os.path.join(MEDIA_ROOT, f"runs{os.path.sep}detect")
YOLOV5_DIR = os.path.join(BASE_DIR, 'yolov5') 
#CFG_FILE_PATH = os.path.join(YOLOV5_DIR, f"models{os.path.sep}yolov5s.yaml")
#HYPS_PATH = os.path.join(YOLOV5_DIR, f"data{os.path.sep}hyps{os.path.sep}hyp.scratch.yaml")
#DATA_CFG_PATH = os.path.join(YOLOV5_DIR, f"data{os.path.sep}data_cfg.yaml")
# YOLO_PROJECT_PATH = os.path.join(MEDIA_ROOT, "yolo_out_dir")
WEIGHTS_PATH = os.path.join(YOLOV5_DIR, f"weights{os.path.sep}best.pt")

if not os.path.exists(SEGMENT_RUN_PATH):
    os.makedirs(SEGMENT_RUN_PATH, exist_ok=True)

if not os.path.exists(PREDICTION_PATH):
    os.makedirs(PREDICTION_PATH, exist_ok=True)